###%file:dot_kernel.py
#
#   MyDot Jupyter Kernel
#   generated by MyPython
#
from math import exp
from queue import Queue
from threading import Thread
from ipykernel.kernelbase import Kernel
from pexpect import replwrap, EOF
from jinja2 import Environment, PackageLoader, select_autoescape,Template
from abc import ABCMeta, abstractmethod
from typing import List, Dict, Tuple, Sequence
from shutil import copyfile,move
from urllib.request import urlopen
import socket
import copy
import mmap
import contextlib
import atexit
import platform
import atexit
import base64
import urllib.request
import urllib.parse
import pexpect
import signal
import typing 
import typing as t
import re
import signal
import subprocess
import tempfile
import os
import stat
import sys
import traceback
import os.path as path
import codecs
import time
import importlib
import importlib.util
import inspect
import ipynbfile
from plugins import ISpecialID
# from plugins.ISpecialID import IStag,IDtag,IBtag,ITag,ICodePreproc
from plugins._filter2_magics import Magics
from Mymacroprocessor import Mymacroprocessor
try:
    zerorpc=__import__("zerorpc")
    # import zerorpc
except:
    pass
fcntl = None
msvcrt = None
bLinux = True
if platform.system() != 'Windows':
    fcntl = __import__("fcntl")
    bLinux = True
else:
    msvcrt = __import__('msvcrt')
    bLinux = False
from .MyKernel import MyKernel
from . import imgsize
from graphviz import Source
class DotKernel(MyKernel):
    kernel_info={
        'info':'[MyDot Kernel]',
        'extension':'.dot',
        'execsuffix':'',
        'needmain':'',
        'compiler':{
            'cmd':'',
            'outfileflag':'',
            'clargs':[],
            'crargs':[],
        },
        'interpreter':{
            'cmd':'',
            'clargs':'',
            'crargs':'',
        },
    }
    implementation = 'jupyter_MyDot_kernel'
    implementation_version = '1.0'
    language = 'Dot'
    language_version = ''
    language_info = {'name': 'text/dot',
                     'mimetype': 'text/dot',
                     'file_extension': kernel_info['extension']}
    runfiletype='script'
    banner = "Dot kernel.\n" \
             "Dot language - render graph using graphviz, and creates source code files and executables in temporary folder.\n"
    main_head = "\n\nint main(List<String> arguments){\n"
    main_foot = "\nreturn 0;\n}"
    def __init__(self, *args, **kwargs):
        super(DotKernel, self).__init__(*args, **kwargs)
        self.runfiletype='script'
        self.kernelinfo="[MyDotKernel{0}]".format(time.strftime("%H%M%S", time.localtime()))
    def do_runcode(self,return_code,fil_ename,magics,code, silent, store_history=True,
                    user_expressions=None, allow_stdin=True):
        return_code=return_code
        fil_ename=fil_ename
        bcancel_exec=False
        retinfo=self.mymagics.get_retinfo()
        retstr=''
        src = None
        has_error = False
        try:
            src = Source(code)
            png_src = src.pipe(format="svg")
        except subprocess.CalledProcessError as _called_error:
            has_error = True
            error = _called_error.stderr
        except Exception as e:
            self.mymagics._logln(str(e),3)
        if not has_error:
            data_string = base64.b64encode(png_src).decode("utf-8",errors='ignore')
            mimetype='image/svg+xml'
            header="<div><img alt=\"Output\" src=\"data:"+mimetype+";base64,"
            end="\"></div>"
            data_string=header+data_string+end
            self.send_response(self.iopub_socket, 'display_data', {'data': {mimetype:data_string}, 'metadata': {mimetype:{}}})
        else:
            self.mymagics._logln(error.decode(),3)
        return bcancel_exec,retinfo,magics, code,fil_ename,retstr
    def do_compile_code(self,return_code,fil_ename,magics,code, silent, store_history=True,
                    user_expressions=None, allow_stdin=True):
        bcancel_exec=False
        retinfo=self.mymagics.get_retinfo()
        retstr=''
        binary_filename=fil_ename
        # if len(self.kernel_info['compiler']['cmd'])>0:
        #     ## 执行编译
        #     returncode,binary_filename=self._exec_sc_(fil_ename,magics)
        #     if returncode!=0:return  True,retinfo, code,fil_ename,retstr
        return bcancel_exec,retinfo,magics, code,binary_filename,retstr
    def do_create_codefile(self,magics,code, silent, store_history=True,
                    user_expressions=None, allow_stdin=True):
        fil_ename=''
        bcancel_exec=False
        retinfo=self.mymagics.get_retinfo()
        retstr=''
        source_file=self.mymagics.create_codetemp_file(magics,code,suffix=self.kernel_info['extension'])
        fil_ename=source_file.name
        return bcancel_exec,retinfo,magics, code,fil_ename,retstr
    def do_preexecute(self,code, magics,silent, store_history=True,
                user_expressions=None, allow_stdin=False):
        bcancel_exec=False
        retinfo=self.mymagics.get_retinfo()
        if (len(self.mymagics.addkey2dict(magics,'noruncode'))<1 
            and len(self.kernel_info['needmain'])>0 ):
            magics, code = self.mymagics._add_main(magics, code)
        return bcancel_exec,retinfo,magics, code
